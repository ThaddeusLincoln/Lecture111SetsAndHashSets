Sets are less used than list and maps. While a list is an ordered collection of items 
(which means that the insertion order is kept) that can contain duplicates. 

Sets:
1. Have no define order (Oracle defines it as chaotic)
2. It can not contain duplicates

TIP : there are ordered sets such as LinkedHashSets and TreeSet

NOTE : you can check if an item exists in the set, using the contains() method,
but there's no way of retrieving an specific item.

The best implementation of the Set interface is the HashSet class, which uses hashes to to store items. 
HashSets are just like HashMaps, actually since Java 8 the implementation currently uses a HashMap, 
so a mapping between sets and HashMaps is possible, and whenever an element is added to the set it 
becomes a key in the underlying HashMap and a dummy object is stored as the  value. 
Sets are useful :
1 - because operations on them are really fast.
2 - because maintaining its Mathematical definition it allows the operations of intersection
and union which is cool). 

In sets theory a union of 2 or more sets is a set containing all the elements of the sets,
so because sets don't contain duplicates each element in a union will only appear once even
if it was present in more than one of the sets. To generate a union we can use the addAll() method.

NOTE : a reference to a String is exactly the same size as the reference to any other object. Besides Java 7
uses compressed pointers that can even end up using less space than 32 bit int. Check out:

https://docs.oracle.com/javase/8/docs/technotes/guides/vm/performance-enhancements-7.html

NOTE : Java doc warn us that when using out own objects as keys in a map or as elements in a set,
we should override the equals() and hashCode() methods. Otherwise it will be used the simple
referential equality of Object.equals() (equivalent to using "==") which most probably won't apply to our classes causing
weird and undesired behaviors in our data structures. 

NOTE : if to object compare equals then their hashCode must be equal as well, so we should override
hashCode() as well when we override equals.

IMPORTANT NOTE ABOUT HASHCODES:=============================================================================
The contract is explained in the hashCode method’s JavaDoc. It can be roughly summarized with this statement:

Objects that are equal must have the same hash code within a running process

Please note that this does not imply the following common misconceptions:

    - Unequal objects must have different hash codes – WRONG!
    - Objects with the same hash code must be equal – WRONG!
    
Please see picture attached : when storing collections in a hashed collection such as HashSets or HashMap,
we can imagine that the collections have a number of buckets to store the objects in. The hashCode determines
which bucket and object is going to go into. Now, it's a requirement that any objects that are equal should 
have the same hashCode and ultimately will go into the same bucket, but the opposite is not true, 
two object with the same hashCode should not necessarily be equal. 

When we generate an object its hash code tells the collection which bucket it should go into, but it may
already be objects in that bucket so each is compared (using equals) to the new object to make sure that
is not already in there. Giving that the comparison is performed using equals(), the collection will only
know if it's already there if it's looking into the right bucket. So the hashCode should be the same. 

There's no point for equals returning true if the collection is checking the wrong bucket (if the hash code 
for the new object is not the same as an object that it's equal to).

A bad scenario example (following the picture) : if we try to add another object that is equal to Object6, 
then the hashCode will indicate that bucket2 should be the one to check. So all the objects already in 
bucket2 will be compared (using equals()) to the new object, so the new object won't be added to the collection.
Because duplicates shouldn't be allowed. 

On the contrary if the new object breaks the rule and has a different hashCode to Object6, although
equals would evaluate true, the collection would be looking in the wrong bucket and won't find the objects
it should be comparing to. Implying that a duplicate object will be added to the collection. An even worse
scenario could happen : because of having duplicates elements in a HashCollection when trying to remove one
we could get first to the one different that the actual one we wanted to delete (all duplicates would
evaluate true with equals) causing undesired behaviors.  


NOTE: if we don't use 
@Override

We risk that our method will overload and not override the base class method, it'll never be used, 
besides @Override also helps to check if the method's signature is right

Technique for generating getEquals() ===============================================================

1. Check that the object is not equal to itself
2. Check that both objects are of the same class
3. It would be useful to use inside it the equals of a class implemented by Java like String

Technique for generating hashCode() ===============================================================

How to generate hashCode is pretty much up to the developer, as long as same objects always return the
same hashCode during any execution of our program and also as all object that compared equals have 
the same hash code. 

Some people says just return 0, but this will make us lose the performance benefits of Hash collections
because all object will be stored in the same bucket. The performance will drop to that of linkedList or
a similar structure, because obviously once the single bucket is located the the new object will be compared
to all elements in there. 

Now adding a number to the name's hashCode will make it different. ANy number that doesn't risk overflowing
an integer will do. We'll use 57. This will guarantee that we have a non-zero number as hashCode.

NOTE: the same fields used in equals() should be used in hashCode().

We need to be extra careful when overriding equals in a class and deciding if we're going to allow sub-classing
for that class. Making equals final would also help to make sure in certain scenarios that the right criteria 
are applied. As well as making the class final, and use composition instead of inheritance. And always remember
that equals has a certain conditions to fulfill.